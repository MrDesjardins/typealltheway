import { QueryResolvers, ProfileResolvers, Profile as ProfileGraphQL } from "../../../generated/graphql/types";
import {
    ProfilesRequest,
    ProfilesResponse,
    Profile as ProfileGRPC,
} from "../../../autogenerated/src/grpcServer/protobuf/profile_pb";
import { GraphQLResolveInfo } from "graphql";
import { CustomContext } from "../context/context";
import { ProfileMapper } from "../mappers/profileMapper";

export const profileResolversMap: {
    Query: QueryResolvers;
    Profile: ProfileResolvers;
} = {
    Query: {
        profilestByFriendsQuantity: async (
            source: Partial<ProfileGraphQL>,
            args: { qte: number },
            context: any,
            info: GraphQLResolveInfo
        ): Promise<ProfileGraphQL[]> => {
            const allProfiles: ProfilesRequest = await context.dataSources.profileService.getListProfiles();
            const allProfilesIds = allProfiles.getIdsList();
            const allProfilesFromIds: ProfilesResponse = await context.dataSources.profileService.getProfiles(
                allProfilesIds
            );
            const allProfilesWithFriends = allProfilesFromIds
                .getProfilesList()
                .filter((d) => d.getFriendidsList().length > args.qte);
            const mapped = allProfilesWithFriends.map((d) => ProfileMapper.mapGrpcProfileToGraphQLProfile(d)); // Name will be unresolved
            return mapped;
        },
        profiles: async (
            source: Partial<ProfileGraphQL>,
            args: {},
            context: any,
            info: GraphQLResolveInfo
        ): Promise<ProfileGraphQL[]> => {
            const allProfiles: ProfilesRequest = await context.dataSources.profileService.getListProfiles();
            const allProfilesIds = allProfiles.getIdsList();
            const allProfilesFromIds: ProfilesResponse = await context.dataSources.profileService.getProfiles(
                allProfilesIds
            );
            const mapped = allProfilesFromIds
                .getProfilesList()
                .map((d) => ProfileMapper.mapGrpcProfileToGraphQLProfile(d)); // Name will be unresolved
            return mapped;
        },
        profile: async (
            source: Partial<ProfileGraphQL>,
            args: { id: number },
            context: CustomContext,
            info: GraphQLResolveInfo
        ): Promise<ProfileGraphQL | undefined> => {
            const result: ProfileGRPC | undefined = await context.loaders.Profile.getProfile.load(args.id);
            return ProfileMapper.mapGrpcProfileToGraphQLProfile(result);
        },
    },
    Profile: {
        name: async (
            parent: Partial<ProfileGraphQL>,
            args: {},
            context: CustomContext
        ): Promise<string | undefined> => {
            if (parent.name === undefined && parent.id !== undefined) {
                const grpcProfile: ProfileGRPC | undefined = await context.loaders.Profile.getProfile.load(parent.id);
                return ProfileMapper.mapGrpcProfileToGraphQLProfile(grpcProfile).name;
            }
            return parent.name;
        },
        friends: async (
            parent: Partial<ProfileGraphQL>,
            args: {},
            context: CustomContext
        ): Promise<ProfileGraphQL[]> => {
            if (parent.id !== undefined) {
                const grpcProfile: ProfileGRPC | undefined = await context.loaders.Profile.getProfile.load(parent.id); // Does not redo a grpc call (already primed)
                const friendsIds = grpcProfile?.getFriendidsList();
                if (friendsIds !== undefined) {
                    const friendsProfile = await context.loaders.Profile.getProfiles.load(friendsIds);
                    return friendsProfile
                        .map((d) => ProfileMapper.mapGrpcProfileToGraphQLProfile(d))
                        .filter((d) => d !== undefined) as ProfileGraphQL[];
                }
            }
            return [];
        },
    },
};
