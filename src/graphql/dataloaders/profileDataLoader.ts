import DataLoader from "dataloader";
import { Profile } from "../../../autogenerated/src/grpcServer/protobuf/profile_pb";
import { GraphQLCustomDataSources } from "../dataSources/graphQLCustomDataSources";
import { orderArrayPayloadWithInput } from "../../shared/dataUtils";

export class ProfileDataLoaders {
    public getProfile: DataLoader<number, Profile | undefined>;
    public getProfiles: DataLoader<number[], (Profile | undefined)[]>;
    public listProfiles: DataLoader<{}, number[]>;

    public constructor(private dataSources: GraphQLCustomDataSources) {
        this.getProfile = new DataLoader<number, Profile | undefined>(
            async (id: readonly number[]) => {
                if (id.length === 1) {
                    const result = await this.dataSources.profileService.getProfile(id[0]);
                    return [result.getProfile()];
                } else {
                    const result = await this.dataSources.profileService.getProfiles(id as number[]);
                    const unOrderedResult = result.getProfilesList();
                    const orderedResult = orderArrayPayloadWithInput(
                        id,
                        unOrderedResult,
                        (p: Profile, id: number): boolean => {
                            return p.getId() === id;
                        }
                    );
                    return orderedResult;
                }
            },
            {
                batch: true,
                cacheKeyFn: (k: number) => {
                    return k;
                },
            }
        );

        this.getProfiles = new DataLoader<number[], (Profile | undefined)[]>(
            async (id: readonly number[][]) => {
                const result = await this.dataSources.profileService.getProfiles(id[0]);
                const unOrderedResult = result.getProfilesList();
                const orderedResult = orderArrayPayloadWithInput(
                    id[0],
                    unOrderedResult,
                    (p: Profile, id: number): boolean => {
                        return p.getId() === id;
                    }
                );
                orderedResult.forEach((o) => {
                    if (o !== undefined) {
                        this.getProfile.prime(o.getId(), o);
                    }
                });
                return [orderedResult];
            },
            { batch: false }
        );

        this.listProfiles = new DataLoader<{}, number[]>(
            async () => {
                try {
                    const result = await this.dataSources.profileService.getListProfiles();
                    return [result.getIdsList()];
                } catch (e) {
                    return [[]];
                }
            },
            { batch: false }
        );
    }
}
