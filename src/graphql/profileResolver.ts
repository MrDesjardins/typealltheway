import { QueryResolvers, ProfileResolvers, Profile } from "../../generated/graphql/types";
import { ProfilesRequest, ProfilesResponse, ProfileResponse } from "../../autogenerated/src/grpcServer/protobuf/profile_pb";

export const profileResolversMap: {
  Query: QueryResolvers;
  Profile: ProfileResolvers
} = {
  Query: {
    getByFriendsQuantity: async (source: Partial<Profile>, args: { qte: number }, context: any, info: any): Promise<Profile[]> => {
      const allProfiles: ProfilesRequest = await context.dataSources.profileService.getListProfiles();
      const allProfilesIds = allProfiles.getIdsList();
      const allProfilesFromIds: ProfilesResponse = await context.dataSources.profileService.getProfiles(allProfilesIds);
      const allProfilesWithFriends = allProfilesFromIds.getProfilesList().filter(d => d.getFriendidsList().length > args.qte);
      const mapped = allProfilesWithFriends.map(d => { return { id: d.getId(), name: undefined } }); // Name will be unresolved
      return mapped;
    }
  },
  Profile: {
    name: async (profile: Partial<Profile>, args: any, context: any): Promise<string | undefined> => {
      if (profile !== undefined) {
        if (profile.name === undefined && profile.id !== undefined) {
          const profileGrpc: ProfileResponse = await context.dataSources.profileService.getProfile(profile.id);
          return `${profileGrpc.getProfile()?.getFirstname()} ${profileGrpc.getProfile()?.getLastname()}`;
        }
        return profile.name; // Resolved by query
      } else {
        return "";
      }
    }
  }
};