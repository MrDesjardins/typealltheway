import grpc from "grpc";
import { profiles } from "./data/fakedata";
import {
    IProfileServiceServer,
    ProfileServiceService,
} from "../../autogenerated/src/grpcServer/protobuf/profile_grpc_pb";
import {
    ProfileRequest,
    ProfileResponse,
    Profile,
    ProfilesRequest,
    ProfilesResponse,
    ListProfilesRequest,
} from "../../autogenerated/src/grpcServer/protobuf/profile_pb";

class ProfileServer implements IProfileServiceServer {
    public getProfile(call: grpc.ServerUnaryCall<ProfileRequest>, callback: grpc.sendUnaryData<ProfileResponse>): void {
        const request = call.request;
        const id = request.getId();
        const result = profiles[id];
        const response = new ProfileResponse();
        response.setProfile(this.mapProfile(result));
        callback(null, response);
    }

    public getProfiles(
        call: grpc.ServerUnaryCall<ProfilesRequest>,
        callback: grpc.sendUnaryData<ProfilesResponse>
    ): void {
        const request = call.request;
        const ids = request.getIdsList();
        const result = Object.values(profiles)
            .filter((d: Profile.AsObject) => ids.indexOf(d.id) >= 0)
            .map((f) => {
                return this.mapProfile(f);
            });
        const response = new ProfilesResponse();
        response.setProfilesList(result);
        callback(null, response);
    }

    public listProfiles(
        call: grpc.ServerUnaryCall<ListProfilesRequest>,
        callback: grpc.sendUnaryData<ProfilesRequest>
    ): void {
        const result = Object.values(profiles);
        const allIds = result.map((d: Profile.AsObject) => d.id);
        const response = new ProfilesRequest();
        response.setIdsList(allIds);
        callback(null, response);
    }

    private mapProfile(from: Profile.AsObject): Profile {
        const profile = new Profile();
        profile.setId(from.id);
        profile.setYearactive(from.yearactive);
        profile.setFirstname(from.firstname);
        profile.setLastname(from.lastname);
        profile.setFriendidsList(from.friendidsList);
        return profile;
    }
}

const server = new grpc.Server();
server.addService<IProfileServiceServer>(ProfileServiceService, new ProfileServer());
server.bind("0.0.0.0:50051", grpc.ServerCredentials.createInsecure());
server.start();
